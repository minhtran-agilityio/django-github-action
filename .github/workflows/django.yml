name: GitHub Actions Demo

on:
  push:
    branches:
      - feature/django-github-action

env:
  MIN_COVERAGE: 80

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3,9
      uses: actions/setup-python@v3
      with:
        python-version: 3.9
    - name: Install dependencies
      id: install-dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      id: linting-python
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Run Unit Tests
      id: run-unittest
      run: |
        docker-compose -f docker-compose.test.yaml up --build
    - name: After testing
      if: steps.run-unittest.outcome.exit_code == 1
      run: |
        echo 'Faield test'

  deploy:
    name: Deploy
    needs: [build]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: 962372302662-ecs-devops-sandbox-repository
        IMAGE_TAG: ${{ github.sha }}
        ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DATABASE_ENGINE: ${{ secrets.DATABASE_ENGINE }}
        DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
        DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
        DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
        DATABASE_USER: ${{ secrets.DATABASE_USER }}
        DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        COLLECT_STATICS: ${{ secrets.COLLECT_STATICS }}
        DATABASE_MIGRATE: ${{ secrets.DATABASE_MIGRATE }}
        RESET_DATABASE: ${{ secrets.RESET_DATABASE }}
        GENERATE_SAMPLE_DATA: ${{ secrets.GENERATE_SAMPLE_DATA }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ecs-devops-sandbox
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ecs-devops-sandbox-service
        cluster: ecs-devops-sandbox-cluster
        wait-for-service-stability: true

